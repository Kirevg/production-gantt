const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function fixMissingProducts(backupPath) {
    try {
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
        console.log(`üìÅ –§–∞–π–ª: ${backupPath}`);

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
        const backupData = JSON.parse(fs.readFileSync(backupPath, 'utf8'));
        const data = backupData.data;

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ productId –∏–∑ projectProducts
        const productIds = data.projectProducts.map(p => p.productId).filter(Boolean);
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ productId –≤ projectProducts: ${productIds.length}`);

        // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        const createdProducts = [];
        for (const productId of productIds) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç
                const existingProduct = await prisma.nomenclatureItem.findUnique({
                    where: { id: productId }
                });

                if (!existingProduct) {
                    // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
                    const newProduct = await prisma.nomenclatureItem.create({
                        data: {
                            id: productId,
                            name: `–ü—Ä–æ–¥—É–∫—Ç ${productId.substring(0, 8)}`,
                            designation: `PROD-${productId.substring(0, 8)}`,
                            article: `ART-${productId.substring(0, 8)}`,
                            code1c: null,
                            manufacturer: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            price: 0,
                            description: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç',
                            type: 'Product',
                            kind: data.nomenclatureKinds[0]?.id ? {
                                connect: { id: data.nomenclatureKinds[0].id }
                            } : undefined,
                            group: data.nomenclatureGroups[0]?.id ? {
                                connect: { id: data.nomenclatureGroups[0].id }
                            } : undefined
                        }
                    });
                    createdProducts.push(newProduct);
                    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: ${newProduct.name} (${newProduct.id})`);
                } else {
                    console.log(`   ‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingProduct.name} (${existingProduct.id})`);
                }
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId}: ${error.message}`);
            }
        }

        console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${createdProducts.length}`);
        console.log('üîß –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å projectProducts!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const backupPath = process.argv[2];
if (!backupPath) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±—ç–∫–∞–ø–∞');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node fix-missing-products.js <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>');
    process.exit(1);
}

fixMissingProducts(backupPath);
