generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  passwordHash String
  role         Role           @default(user)
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  personId     String?        @unique
  auditLogs    AuditLog[]
  projects     Project[]      @relation("ProjectOwner")
  tokens       RefreshToken[]
  person       Person?        @relation(fields: [personId], references: [id])

  @@index([personId])
}

model Person {
  id                String    @id @default(uuid())
  lastName          String
  firstName         String
  middleName        String?
  position          String?
  phone             String?
  email             String?
  isProjectManager  Boolean   @default(false)
  isActive          Boolean   @default(true)
  projectsAsManager Project[] @relation("ProjectManager")
  user              User?

  @@index([isProjectManager])
  @@index([isActive])
}

model Counterparty {
  id             String      @id @default(uuid())
  name           String
  fullName       String?
  inn            String?
  kpp            String?
  legalAddress   String?
  contactName    String?
  phone          String?
  email          String?
  isSupplier     Boolean     @default(false)
  isManufacturer Boolean     @default(false)
  isContractor   Boolean     @default(false)
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  workStages     WorkStage[]

  @@index([isSupplier])
  @@index([isManufacturer])
  @@index([isContractor])
  @@index([isActive])
}

model Unit {
  id                String             @id @default(uuid())
  code              String             @unique
  name              String
  fullName          String?
  internationalCode String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  nomenclatureItems NomenclatureItem[]
  specifications    Specification[]

  @@index([code])
}

model Project {
  id               String           @id @default(uuid())
  name             String
  status           ProjectStatus    @default(InProject)
  startDate        DateTime?
  endDate          DateTime?
  ownerId          String
  orderIndex       Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  projectManagerId String?
  owner            User             @relation("ProjectOwner", fields: [ownerId], references: [id])
  projectManager   Person?          @relation("ProjectManager", fields: [projectManagerId], references: [id])
  products         ProjectProduct[]

  @@index([status])
  @@index([ownerId])
  @@index([projectManagerId])
  @@index([orderIndex])
  @@index([startDate, endDate])
}

model Product {
  id              String           @id @default(uuid())
  name            String
  designation     String?
  article         String?
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  projectProducts ProjectProduct[]

  @@index([name])
  @@index([isActive])
}

model ProjectProduct {
  id                    String                 @id @default(uuid())
  projectId             String
  serialNumber          String?
  description           String?
  quantity              Int                    @default(1)
  productSum            Float?
  orderIndex            Int                    @default(0)
  version               Int                    @default(1)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  productId             String
  productSpecifications ProductSpecification[]
  product               Product                @relation(fields: [productId], references: [id])
  project               Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workStages            WorkStage[]

  @@index([projectId])
  @@index([productId])
  @@index([orderIndex])
}

model WorkStage {
  id                 String            @id @default(uuid())
  assigneeId         String?
  startDate          DateTime?
  endDate            DateTime?
  duration           Int               @default(1)
  progress           Int               @default(0)
  sum                String
  orderIndex         Int               @default(0)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  hours              String?
  nomenclatureItemId String?
  productId          String
  assignee           Counterparty?     @relation(fields: [assigneeId], references: [id])
  nomenclatureItem   NomenclatureItem? @relation("WorkStageNomenclature", fields: [nomenclatureItemId], references: [id])
  product            ProjectProduct    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([nomenclatureItemId])
  @@index([assigneeId])
  @@index([startDate, endDate])
}

model ProductSpecification {
  id             String          @id @default(uuid())
  productId      String
  name           String
  description    String?
  version        Int             @default(1)
  isLocked       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  totalSum       Float?
  product        ProjectProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  specifications Specification[]

  @@index([productId])
  @@index([isLocked])
}

model Specification {
  id                     String               @id @default(uuid())
  productSpecificationId String
  quantity               Int                  @default(1)
  price                  Float?
  totalPrice             Float?
  orderIndex             Int                  @default(0)
  version                Int                  @default(1)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  nomenclatureItemId     String
  unitId                 String?
  nomenclatureItem       NomenclatureItem     @relation("SpecificationNomenclature", fields: [nomenclatureItemId], references: [id])
  productSpecification   ProductSpecification @relation(fields: [productSpecificationId], references: [id], onDelete: Cascade)
  unit                   Unit?                @relation(fields: [unitId], references: [id])

  @@index([productSpecificationId])
  @@index([nomenclatureItemId])
  @@index([orderIndex])
  @@index([version])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  entityType String
  entityId   String
  action     String
  diff       Json?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([createdAt])
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model NomenclatureKind {
  id          String             @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  items       NomenclatureItem[]
}

model NomenclatureGroup {
  id          String              @id @default(uuid())
  name        String
  description String?
  parentId    String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  parent      NomenclatureGroup?  @relation("GroupHierarchy", fields: [parentId], references: [id])
  children    NomenclatureGroup[] @relation("GroupHierarchy")
  items       NomenclatureItem[]

  @@index([parentId])
}

model NomenclatureItem {
  id             String             @id @default(uuid())
  groupId        String?
  type           NomenclatureType   @default(Product)
  designation    String?
  name           String
  article        String?
  code1c         String?
  manufacturer   String?
  description    String?
  price          Float?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  unitId         String?
  kindId         String?
  group          NomenclatureGroup? @relation(fields: [groupId], references: [id])
  kind           NomenclatureKind?  @relation(fields: [kindId], references: [id])
  unit           Unit?              @relation(fields: [unitId], references: [id])
  specifications Specification[]    @relation("SpecificationNomenclature")
  workStages     WorkStage[]        @relation("WorkStageNomenclature")

  @@index([groupId])
  @@index([kindId])
  @@index([unitId])
  @@index([code1c])
  @@index([article])
  @@index([type])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model backup {

  /// This field was commented out because of an invalid name. Please provide a valid one that matches [a-zA-Z][a-zA-Z0-9_]*
  // { String? @map("{") @db.VarChar(64)
  @@ignore
}

enum Role {
  admin
  manager
  user
}

enum ProjectStatus {
  InProject
  InProgress
  Done
  HasProblems
}

enum NomenclatureType {
  Product
  Service
  Work
}
