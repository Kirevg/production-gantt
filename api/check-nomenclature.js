const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkNomenclature() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

        const items = await prisma.nomenclatureItem.findMany();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${items.length}`);

        if (items.length > 0) {
            console.log('‚úÖ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
            console.log('üìã –ü–µ—Ä–≤—ã–µ 5 –ø–æ–∑–∏—Ü–∏–π:');
            items.slice(0, 5).forEach((item, index) => {
                console.log(`   ${index + 1}. ${item.name} (${item.designation || '–±–µ–∑ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è'})`);
            });
        } else {
            console.log('‚ùå –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        const users = await prisma.user.findMany();
        const persons = await prisma.person.findMany();
        const projects = await prisma.project.findMany();

        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:');
        console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}`);
        console.log(`   - –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞: ${persons.length}`);
        console.log(`   - –ü—Ä–æ–µ–∫—Ç—ã: ${projects.length}`);
        console.log(`   - –ü–æ–∑–∏—Ü–∏–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${items.length}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    } finally {
        await prisma.$disconnect();
    }
}

checkNomenclature();
