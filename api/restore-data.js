const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function restoreData() {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');

        // –ß–∏—Ç–∞–µ–º –¥–∞–º–ø
        const backupPath = 'C:\\Projects\\backup_2025-10-04.json';
        const backupData = JSON.parse(fs.readFileSync(backupPath, 'utf8'));

        console.log('üìã –î–∞–Ω–Ω—ã–µ –∏–∑ –¥–∞–º–ø–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üßπ –û—á–∏—â–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
        await prisma.specification.deleteMany();
        await prisma.productSpecification.deleteMany();
        await prisma.workStage.deleteMany();
        await prisma.product.deleteMany();
        await prisma.project.deleteMany();
        await prisma.workType.deleteMany();
        await prisma.contractor.deleteMany();
        await prisma.projectManager.deleteMany();
        await prisma.user.deleteMany();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üë§ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        for (const user of backupData.data.users) {
            await prisma.user.create({
                data: {
                    id: user.id,
                    email: user.email,
                    passwordHash: user.passwordHash,
                    role: user.role,
                    isActive: user.isActive,
                    createdAt: new Date(user.createdAt),
                    updatedAt: new Date(user.updatedAt)
                }
            });
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
        console.log('üë®‚Äçüíº –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
        for (const manager of backupData.data.projectManagers) {
            await prisma.projectManager.create({
                data: {
                    id: manager.id,
                    firstName: manager.firstName,
                    lastName: manager.lastName,
                    middleName: manager.middleName,
                    email: manager.email,
                    phone: manager.phone,
                    createdAt: new Date(manager.createdAt),
                    updatedAt: new Date(manager.updatedAt)
                }
            });
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
        console.log('üèóÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤...');
        for (const contractor of backupData.data.contractors) {
            await prisma.contractor.create({
                data: {
                    id: contractor.id,
                    name: contractor.name,
                    contactName: contractor.contactName,
                    phone: contractor.phone,
                    email: contractor.email,
                    isActive: contractor.isActive,
                    createdAt: new Date(contractor.createdAt),
                    updatedAt: new Date(contractor.updatedAt)
                }
            });
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø—ã —Ä–∞–±–æ—Ç
        console.log('üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∏–ø—ã —Ä–∞–±–æ—Ç...');
        for (const workType of backupData.data.workTypes) {
            await prisma.workType.create({
                data: {
                    id: workType.id,
                    name: workType.name,
                    description: workType.description,
                    isActive: workType.isActive,
                    createdAt: new Date(workType.createdAt),
                    updatedAt: new Date(workType.updatedAt)
                }
            });
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
        console.log('üìÅ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–µ–∫—Ç—ã...');
        for (const project of backupData.data.projects) {
            await prisma.project.create({
                data: {
                    id: project.id,
                    name: project.name,
                    status: project.status,
                    startDate: project.startDate ? new Date(project.startDate) : null,
                    endDate: project.endDate ? new Date(project.endDate) : null,
                    ownerId: project.ownerId,
                    managerId: project.managerId,
                    orderIndex: project.orderIndex,
                    createdAt: new Date(project.createdAt),
                    updatedAt: new Date(project.updatedAt)
                }
            });
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã (–±—ã–≤—à–∏–µ tasks)
        console.log('üì¶ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã...');
        for (const project of backupData.data.projects) {
            for (const task of project.tasks) {
                await prisma.product.create({
                    data: {
                        id: task.id,
                        name: task.name,
                        description: task.description,
                        productSum: task.productSum,
                        orderIndex: task.orderIndex,
                        version: task.version,
                        projectId: project.id,
                        createdAt: new Date(),
                        updatedAt: new Date()
                    }
                });
            }
        }

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${backupData.data.users.length}`);
        console.log(`- –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ${backupData.data.projectManagers.length}`);
        console.log(`- –ü–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: ${backupData.data.contractors.length}`);
        console.log(`- –¢–∏–ø–æ–≤ —Ä–∞–±–æ—Ç: ${backupData.data.workTypes.length}`);
        console.log(`- –ü—Ä–æ–µ–∫—Ç–æ–≤: ${backupData.data.projects.length}`);

        let totalProducts = 0;
        for (const project of backupData.data.projects) {
            totalProducts += project.tasks.length;
        }
        console.log(`- –ü—Ä–æ–¥—É–∫—Ç–æ–≤: ${totalProducts}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
        await prisma.$disconnect();
    }
}

restoreData();
