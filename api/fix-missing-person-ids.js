const { PrismaClient } = require('@prisma/client');
const { v4: uuidv4 } = require('uuid');

const prisma = new PrismaClient();

async function fixMissingPersonIds() {
    try {
        console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π Person –±–µ–∑ ID...');
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ ID (–≥–¥–µ id = null –∏–ª–∏ –ø—É—Å—Ç–æ–π)
        const personsWithoutId = await prisma.person.findMany({
            where: {
                OR: [
                    { id: null },
                    { id: '' }
                ]
            }
        });

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${personsWithoutId.length} –∑–∞–ø–∏—Å–µ–π –±–µ–∑ ID`);

        if (personsWithoutId.length === 0) {
            console.log('‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –∏–º–µ—é—Ç ID');
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ UUID –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        for (const person of personsWithoutId) {
            const newId = uuidv4();
            
            console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º: ${person.lastName} ${person.firstName} -> ${newId}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤—ã–º ID
            await prisma.person.update({
                where: {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞
                    lastName_firstName: {
                        lastName: person.lastName,
                        firstName: person.firstName
                    }
                },
                data: {
                    id: newId
                }
            });
        }

        console.log('‚úÖ –í—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ ID –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const remainingWithoutId = await prisma.person.findMany({
            where: {
                OR: [
                    { id: null },
                    { id: '' }
                ]
            }
        });
        
        console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π –±–µ–∑ ID: ${remainingWithoutId.length}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ID:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixMissingPersonIds();
