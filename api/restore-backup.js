const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function restoreBackup(backupPath) {
    try {
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
        console.log(`üìÅ –§–∞–π–ª: ${backupPath}`);

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
        const backupData = JSON.parse(fs.readFileSync(backupPath, 'utf8'));
        const data = backupData.data;

        console.log('üìä –î–∞–Ω–Ω—ã–µ –≤ –±—ç–∫–∞–ø–µ:');
        console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${data.users.length}`);
        console.log(`   - –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞: ${data.persons.length}`);
        console.log(`   - –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã: ${data.counterparties.length}`);
        console.log(`   - –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${data.units.length}`);
        console.log(`   - –ü—Ä–æ–µ–∫—Ç—ã: ${data.projects.length}`);
        console.log(`   - –ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: ${data.projectProducts.length}`);
        console.log(`   - –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç: ${data.workStages.length}`);
        console.log(`   - –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–¥–µ–ª–∏–π: ${data.productSpecifications.length}`);
        console.log(`   - –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${data.specifications.length}`);
        console.log(`   - –í–∏–¥—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${data.nomenclatureKinds.length}`);
        console.log(`   - –ì—Ä—É–ø–ø—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${data.nomenclatureGroups.length}`);
        console.log(`   - –ü–æ–∑–∏—Ü–∏–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${data.nomenclatureItems.length}`);

        // –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
        console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await prisma.refreshToken.deleteMany();
        await prisma.auditLog.deleteMany();
        await prisma.specification.deleteMany();
        await prisma.productSpecification.deleteMany();
        await prisma.workStage.deleteMany();
        await prisma.projectProduct.deleteMany();
        await prisma.project.deleteMany();
        await prisma.nomenclatureItem.deleteMany();
        await prisma.nomenclatureGroup.deleteMany();
        await prisma.nomenclatureKind.deleteMany();
        await prisma.unit.deleteMany();
        await prisma.counterparty.deleteMany();
        await prisma.person.deleteMany();
        await prisma.user.deleteMany();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        console.log('üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');

        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if (data.persons.length > 0) {
            await prisma.person.createMany({ data: data.persons });
            console.log(`‚úÖ –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞: ${data.persons.length}`);
        }

        if (data.users.length > 0) {
            await prisma.user.createMany({ data: data.users });
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${data.users.length}`);
        }

        if (data.counterparties.length > 0) {
            await prisma.counterparty.createMany({ data: data.counterparties });
            console.log(`‚úÖ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã: ${data.counterparties.length}`);
        }

        if (data.units.length > 0) {
            await prisma.unit.createMany({ data: data.units });
            console.log(`‚úÖ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${data.units.length}`);
        }

        if (data.nomenclatureKinds.length > 0) {
            await prisma.nomenclatureKind.createMany({ data: data.nomenclatureKinds });
            console.log(`‚úÖ –í–∏–¥—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${data.nomenclatureKinds.length}`);
        }

        if (data.nomenclatureGroups.length > 0) {
            await prisma.nomenclatureGroup.createMany({ data: data.nomenclatureGroups });
            console.log(`‚úÖ –ì—Ä—É–ø–ø—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${data.nomenclatureGroups.length}`);
        }

        if (data.nomenclatureItems.length > 0) {
            await prisma.nomenclatureItem.createMany({ data: data.nomenclatureItems });
            console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${data.nomenclatureItems.length}`);
        }

        if (data.projects.length > 0) {
            await prisma.project.createMany({ data: data.projects });
            console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç—ã: ${data.projects.length}`);
        }

        if (data.projectProducts.length > 0) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            let successCount = 0;
            for (const product of data.projectProducts) {
                try {
                    await prisma.projectProduct.upsert({
                        where: { id: product.id },
                        update: product,
                        create: product
                    });
                    successCount++;
                } catch (error) {
                    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ${product.id}: ${error.message}`);
                }
            }
            console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: ${successCount}/${data.projectProducts.length}`);
        }

        if (data.workStages.length > 0) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            let successCount = 0;
            for (const stage of data.workStages) {
                try {
                    await prisma.workStage.upsert({
                        where: { id: stage.id },
                        update: stage,
                        create: stage
                    });
                    successCount++;
                } catch (error) {
                    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —ç—Ç–∞–ø ${stage.id}: ${error.message}`);
                }
            }
            console.log(`‚úÖ –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç: ${successCount}/${data.workStages.length}`);
        }

        if (data.productSpecifications.length > 0) {
            await prisma.productSpecification.createMany({ data: data.productSpecifications });
            console.log(`‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–¥–µ–ª–∏–π: ${data.productSpecifications.length}`);
        }

        if (data.specifications.length > 0) {
            await prisma.specification.createMany({ data: data.specifications });
            console.log(`‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${data.specifications.length}`);
        }

        if (data.auditLogs.length > 0) {
            await prisma.auditLog.createMany({ data: data.auditLogs });
            console.log(`‚úÖ –õ–æ–≥–∏ –∞—É–¥–∏—Ç–∞: ${data.auditLogs.length}`);
        }

        if (data.refreshTokens.length > 0) {
            await prisma.refreshToken.createMany({ data: data.refreshTokens });
            console.log(`‚úÖ –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${data.refreshTokens.length}`);
        }

        console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const backupPath = process.argv[2];
if (!backupPath) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±—ç–∫–∞–ø–∞');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node restore-backup.js <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>');
    process.exit(1);
}

restoreBackup(backupPath);
