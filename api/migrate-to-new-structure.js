const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function migrate() {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...\n');

    try {
        // 1. –ú–∏–≥—Ä–∞—Ü–∏—è ProjectManager -> Person
        console.log('1Ô∏è‚É£ –ú–∏–≥—Ä–∞—Ü–∏—è ProjectManager -> Person...');
        const projectManagers = await prisma.projectManager.findMany();
        
        const personMapping = {};
        for (const pm of projectManagers) {
            const person = await prisma.person.create({
                data: {
                    lastName: pm.lastName,
                    firstName: pm.firstName,
                    middleName: pm.middleName,
                    email: pm.email,
                    phone: pm.phone,
                    isProjectManager: true,
                    isActive: true
                }
            });
            personMapping[pm.id] = person.id;
            console.log(`   ‚úì ${pm.lastName} ${pm.firstName} -> Person ID: ${person.id}`);
        }

        // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –≤ Project
        console.log('\n2Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
        const projects = await prisma.project.findMany();
        for (const project of projects) {
            if (project.managerId && personMapping[project.managerId]) {
                await prisma.project.update({
                    where: { id: project.id },
                    data: { projectManagerId: personMapping[project.managerId] }
                });
                console.log(`   ‚úì –ü—Ä–æ–µ–∫—Ç "${project.name}" –æ–±–Ω–æ–≤–ª–µ–Ω`);
            }
        }

        // 3. –ú–∏–≥—Ä–∞—Ü–∏—è Contractor -> Counterparty
        console.log('\n3Ô∏è‚É£ –ú–∏–≥—Ä–∞—Ü–∏—è Contractor -> Counterparty...');
        const contractors = await prisma.contractor.findMany();
        
        const counterpartyMapping = {};
        for (const contractor of contractors) {
            const counterparty = await prisma.counterparty.create({
                data: {
                    name: contractor.name,
                    contactName: contractor.contactName,
                    phone: contractor.phone,
                    email: contractor.email,
                    isContractor: true,
                    isActive: contractor.isActive
                }
            });
            counterpartyMapping[contractor.id] = counterparty.id;
            console.log(`   ‚úì ${contractor.name} -> Counterparty ID: ${counterparty.id}`);
        }

        // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –≤ WorkStage
        console.log('\n4Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç...');
        const workStages = await prisma.workStage.findMany();
        for (const stage of workStages) {
            if (stage.assigneeId && counterpartyMapping[stage.assigneeId]) {
                await prisma.workStage.update({
                    where: { id: stage.id },
                    data: { assigneeId: counterpartyMapping[stage.assigneeId] }
                });
            }
        }
        console.log(`   ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ ${workStages.length} —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç`);

        // 5. –ú–∏–≥—Ä–∞—Ü–∏—è WorkType -> NomenclatureItem
        console.log('\n5Ô∏è‚É£ –ú–∏–≥—Ä–∞—Ü–∏—è WorkType -> NomenclatureItem...');
        const workTypes = await prisma.workType.findMany();
        
        const workTypeMapping = {};
        for (const workType of workTypes) {
            const nomenclatureItem = await prisma.nomenclatureItem.create({
                data: {
                    name: workType.name,
                    description: workType.description,
                    type: 'Work',
                }
            });
            workTypeMapping[workType.id] = nomenclatureItem.id;
            console.log(`   ‚úì ${workType.name} -> NomenclatureItem ID: ${nomenclatureItem.id}`);
        }

        // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ workTypeId -> nomenclatureItemId –≤ WorkStage
        console.log('\n6Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ WorkStage —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π...');
        for (const stage of workStages) {
            if (stage.workTypeId && workTypeMapping[stage.workTypeId]) {
                // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å nomenclatureItemId, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                if (!stage.nomenclatureItemId) {
                    await prisma.workStage.update({
                        where: { id: stage.id },
                        data: { nomenclatureItemId: workTypeMapping[stage.workTypeId] }
                    });
                }
            }
        }
        console.log(`   ‚úì –°–≤—è–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);

        console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   - –†–ü -> Person: ${Object.keys(personMapping).length}`);
        console.log(`   - Contractor -> Counterparty: ${Object.keys(counterpartyMapping).length}`);
        console.log(`   - WorkType -> NomenclatureItem: ${Object.keys(workTypeMapping).length}`);

    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

migrate();

