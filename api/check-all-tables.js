const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkAllTables() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        const [
            users,
            persons,
            counterparties,
            units,
            projects,
            projectProducts,
            workStages,
            productSpecifications,
            specifications,
            nomenclatureKinds,
            nomenclatureGroups,
            nomenclatureItems,
            auditLogs,
            refreshTokens
        ] = await Promise.all([
            prisma.user.findMany(),
            prisma.person.findMany(),
            prisma.counterparty.findMany(),
            prisma.unit.findMany(),
            prisma.project.findMany(),
            prisma.projectProduct.findMany(),
            prisma.workStage.findMany(),
            prisma.productSpecification.findMany(),
            prisma.specification.findMany(),
            prisma.nomenclatureKind.findMany(),
            prisma.nomenclatureGroup.findMany(),
            prisma.nomenclatureItem.findMany(),
            prisma.auditLog.findMany(),
            prisma.refreshToken.findMany()
        ]);

        console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
        console.log('‚ïê'.repeat(50));

        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ò –õ–ò–¶–ê:');
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}`);
        console.log(`   ‚úÖ –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞: ${persons.length}`);
        console.log(`   ‚úÖ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã: ${counterparties.length}`);

        // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        console.log('\nüìö –°–ü–†–ê–í–û–ß–ù–ò–ö–ò:');
        console.log(`   ‚úÖ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${units.length}`);
        console.log(`   ‚úÖ –í–∏–¥—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${nomenclatureKinds.length}`);
        console.log(`   ‚úÖ –ì—Ä—É–ø–ø—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${nomenclatureGroups.length}`);
        console.log(`   ‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${nomenclatureItems.length}`);

        // –ü—Ä–æ–µ–∫—Ç—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã
        console.log('\nüèóÔ∏è –ü–†–û–ï–ö–¢–´ –ò –ü–†–û–î–£–ö–¢–´:');
        console.log(`   ‚úÖ –ü—Ä–æ–µ–∫—Ç—ã: ${projects.length}`);
        console.log(`   ${projectProducts.length > 0 ? '‚úÖ' : '‚ùå'} –ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectProducts.length}`);
        console.log(`   ${workStages.length > 0 ? '‚úÖ' : '‚ùå'} –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç: ${workStages.length}`);

        // –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        console.log('\nüìã –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ò:');
        console.log(`   ${productSpecifications.length > 0 ? '‚úÖ' : '‚ùå'} –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–¥–µ–ª–∏–π: ${productSpecifications.length}`);
        console.log(`   ${specifications.length > 0 ? '‚úÖ' : '‚ùå'} –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${specifications.length}`);

        // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        console.log('\nüîß –°–ò–°–¢–ï–ú–ù–´–ï:');
        console.log(`   ${auditLogs.length > 0 ? '‚úÖ' : '‚ùå'} –õ–æ–≥–∏ –∞—É–¥–∏—Ç–∞: ${auditLogs.length}`);
        console.log(`   ${refreshTokens.length > 0 ? '‚úÖ' : '‚ùå'} –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${refreshTokens.length}`);

        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalTables = 14;
        const restoredTables = [
            users.length > 0,
            persons.length > 0,
            counterparties.length > 0,
            units.length > 0,
            projects.length > 0,
            projectProducts.length > 0,
            workStages.length > 0,
            productSpecifications.length > 0,
            specifications.length > 0,
            nomenclatureKinds.length > 0,
            nomenclatureGroups.length > 0,
            nomenclatureItems.length > 0,
            auditLogs.length > 0,
            refreshTokens.length > 0
        ].filter(Boolean).length;

        console.log('\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log('‚ïê'.repeat(50));
        console.log(`   üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${restoredTables}/${totalTables}`);
        console.log(`   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${Math.round((restoredTables / totalTables) * 100)}%`);

        // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        const emptyTables = [];
        if (projectProducts.length === 0) emptyTables.push('–ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤');
        if (workStages.length === 0) emptyTables.push('–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç');
        if (productSpecifications.length === 0) emptyTables.push('–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–¥–µ–ª–∏–π');
        if (specifications.length === 0) emptyTables.push('–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏');

        if (emptyTables.length > 0) {
            console.log('\n‚ö†Ô∏è –ü–£–°–¢–´–ï –¢–ê–ë–õ–ò–¶–´:');
            emptyTables.forEach(table => console.log(`   ‚ùå ${table}`));
        }

        console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    } finally {
        await prisma.$disconnect();
    }
}

checkAllTables();
