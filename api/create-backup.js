const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function createBackup() {
    try {
        console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        const [
            users,
            persons,
            counterparties,
            units,
            projects,
            projectProducts,
            workStages,
            productSpecifications,
            specifications,
            nomenclatureKinds,
            nomenclatureGroups,
            nomenclatureItems,
            auditLogs,
            refreshTokens
        ] = await Promise.all([
            prisma.user.findMany(),
            prisma.person.findMany(),
            prisma.counterparty.findMany(),
            prisma.unit.findMany(),
            prisma.project.findMany(),
            prisma.projectProduct.findMany(),
            prisma.workStage.findMany(),
            prisma.productSpecification.findMany(),
            prisma.specification.findMany(),
            prisma.nomenclatureKind.findMany(),
            prisma.nomenclatureGroup.findMany(),
            prisma.nomenclatureItem.findMany(),
            prisma.auditLog.findMany(),
            prisma.refreshToken.findMany()
        ]);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
        const backup = {
            timestamp: new Date().toISOString(),
            version: '1.0',
            data: {
                users,
                persons,
                counterparties,
                units,
                projects,
                projectProducts,
                workStages,
                productSpecifications,
                specifications,
                nomenclatureKinds,
                nomenclatureGroups,
                nomenclatureItems,
                auditLogs,
                refreshTokens
            }
        };

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const day = String(now.getDate()).padStart(2, '0');
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        const timestamp = `${year}-${month}-${day}_${hours}-${minutes}-${seconds}`;
        const filename = `backup_${timestamp}.json`;
        const filepath = path.join(__dirname, 'backups', filename);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(filepath, JSON.stringify(backup, null, 2));

        console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìÅ –§–∞–π–ª: ${filepath}`);
        console.log(`üìä –î–∞–Ω–Ω—ã–µ:`);
        console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}`);
        console.log(`   - –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞: ${persons.length}`);
        console.log(`   - –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã: ${counterparties.length}`);
        console.log(`   - –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${units.length}`);
        console.log(`   - –ü—Ä–æ–µ–∫—Ç—ã: ${projects.length}`);
        console.log(`   - –ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectProducts.length}`);
        console.log(`   - –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç: ${workStages.length}`);
        console.log(`   - –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–¥–µ–ª–∏–π: ${productSpecifications.length}`);
        console.log(`   - –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${specifications.length}`);
        console.log(`   - –í–∏–¥—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${nomenclatureKinds.length}`);
        console.log(`   - –ì—Ä—É–ø–ø—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${nomenclatureGroups.length}`);
        console.log(`   - –ü–æ–∑–∏—Ü–∏–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: ${nomenclatureItems.length}`);
        console.log(`   - –õ–æ–≥–∏ –∞—É–¥–∏—Ç–∞: ${auditLogs.length}`);
        console.log(`   - –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${refreshTokens.length}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

createBackup();
