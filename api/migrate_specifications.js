const { PrismaClient } = require('@prisma/client');

async function migrateSpecifications() {
    const prisma = new PrismaClient();

    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π...');

        // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
        const projects = await prisma.project.findMany({
            include: {
                tasks: {
                    include: {
                        specifications: true
                    }
                }
            }
        });

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);

        for (const project of projects) {
            console.log(`\nüìÅ –ü—Ä–æ–µ–∫—Ç: ${project.name}`);

            // 3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–¥–µ–ª–∏—è (Task) —Å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é ProjectSpecification
            let totalSpecs = 0;
            for (const task of project.tasks) {
                if (task.specifications.length > 0) {
                    console.log(`  üì¶ –ò–∑–¥–µ–ª–∏–µ: ${task.name} (${task.specifications.length} –ø–æ–∑–∏—Ü–∏–π)`);

                    // –°–æ–∑–¥–∞–µ–º ProjectSpecification –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è
                    const projectSpec = await prisma.projectSpecification.create({
                        data: {
                            projectId: project.id,
                            taskId: task.id, // –°–≤—è–∑—ã–≤–∞–µ–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–∑–¥–µ–ª–∏–µ–º
                            name: `–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: ${task.name}`,
                            description: `–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∏–∑–¥–µ–ª–∏—è ${task.name}`
                        }
                    });

                    console.log(`    ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: ${projectSpec.name}`);

                    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –∏–∑–¥–µ–ª–∏—è –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é ProjectSpecification
                    for (const spec of task.specifications) {
                        await prisma.specification.update({
                            where: { id: spec.id },
                            data: {
                                projectSpecificationId: projectSpec.id,
                                taskId: null // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ Task
                            }
                        });
                        totalSpecs++;
                    }
                }
            }

            console.log(`  ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${totalSpecs}`);
        }

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const totalProjectSpecs = await prisma.projectSpecification.count();
        const totalSpecs = await prisma.specification.count({
            where: {
                projectSpecificationId: { not: null }
            }
        });

        console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
        console.log(`  - –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞: ${totalProjectSpecs}`);
        console.log(`  - –ü–æ–∑–∏—Ü–∏–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: ${totalSpecs}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    } finally {
        await prisma.$disconnect();
    }
}

migrateSpecifications();
