const { PrismaClient } = require('@prisma/client');
const { v4: uuidv4 } = require('uuid');

const prisma = new PrismaClient();

async function fixMissingPersonIds() {
    try {
        console.log('üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ Person...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ Person
        const allPersons = await prisma.person.findMany();
        
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${allPersons.length}`);
        
        let updatedCount = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        for (const person of allPersons) {
            // –ï—Å–ª–∏ ID –ø—É—Å—Ç–æ–π –∏–ª–∏ null, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
            if (!person.id || person.id === '' || person.id === null) {
                const newId = uuidv4();
                
                console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º: ${person.lastName} ${person.firstName} -> ${newId}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                await prisma.person.update({
                    where: {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
                        lastName_firstName_middleName: {
                            lastName: person.lastName,
                            firstName: person.firstName,
                            middleName: person.middleName
                        }
                    },
                    data: {
                        id: newId
                    }
                });
                
                updatedCount++;
            }
        }

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updatedCount}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        
        // –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–Ω–æ–≤–∞
            const allPersons = await prisma.person.findMany();
            
            for (const person of allPersons) {
                if (!person.id || person.id === '' || person.id === null) {
                    const newId = uuidv4();
                    
                    // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
                    await prisma.$executeRaw`
                        UPDATE "Person" 
                        SET id = ${newId}
                        WHERE "lastName" = ${person.lastName} 
                        AND "firstName" = ${person.firstName}
                        AND ("middleName" = ${person.middleName} OR ("middleName" IS NULL AND ${person.middleName} IS NULL))
                        AND id IS NULL
                    `;
                    
                    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${person.lastName} ${person.firstName}`);
                }
            }
            
        } catch (rawError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ raw SQL:', rawError);
        }
        
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixMissingPersonIds();
