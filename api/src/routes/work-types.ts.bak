import { Router } from 'express';
import { PrismaClient } from '@prisma/client';
import { authenticateToken, requireRole } from '../middleware/auth';
import { z } from 'zod';

const router = Router();
const prisma = new PrismaClient();

// Схемы валидации
const workTypeCreateSchema = z.object({
    name: z.string().min(1, 'Название обязательно'),
    description: z.string().optional(),
});

const workTypeUpdateSchema = z.object({
    name: z.string().min(1, 'Название обязательно').optional(),
    description: z.string().optional(),
    isActive: z.boolean().optional(),
});

// GET /work-types - получить все виды работ
router.get('/', authenticateToken, async (req, res) => {
    try {
        const workTypes = await prisma.workType.findMany({
            orderBy: { name: 'asc' },
        });
        res.json(workTypes);
    } catch (error) {
        console.error('Error fetching work types:', error);
        res.status(500).json({ error: 'Failed to fetch work types' });
    }
});

// POST /work-types - создать новый вид работ (только для админов и менеджеров)
router.post('/', authenticateToken, requireRole(['admin', 'manager']), async (req, res) => {
    try {
        const data = workTypeCreateSchema.parse(req.body);
        const workType = await prisma.workType.create({
            data: {
                name: data.name,
                description: data.description || null,
            },
        });
        res.status(201).json(workType);
    } catch (error) {
        console.error('Error creating work type:', error);
        if (error instanceof z.ZodError) {
            return res.status(400).json({ error: 'Invalid data', details: error.issues });
        }
        res.status(500).json({ error: 'Failed to create work type' });
    }
});

// PUT /work-types/:id - обновить вид работ (только для админов и менеджеров)
router.put('/:id', authenticateToken, requireRole(['admin', 'manager']), async (req, res) => {
    try {
        const { id } = req.params;
        const data = workTypeUpdateSchema.parse(req.body);

        const workType = await prisma.workType.update({
            where: { id: id as string },
            data: {
                ...(data.name !== undefined && { name: data.name }),
                ...(data.description !== undefined && { description: data.description }),
                ...(data.isActive !== undefined && { isActive: data.isActive }),
                updatedAt: new Date(),
            },
        });
        res.json(workType);
    } catch (error) {
        console.error('Error updating work type:', error);
        if (error instanceof z.ZodError) {
            return res.status(400).json({ error: 'Invalid data', details: error.issues });
        }
        res.status(500).json({ error: 'Failed to update work type' });
    }
});

// DELETE /work-types/:id - удалить вид работ (только для админов)
router.delete('/:id', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const { id } = req.params;

        // Проверяем, есть ли этапы работ с этим видом работ
        const workStagesWithWorkType = await prisma.workStage.findFirst({
            where: { workTypeId: id as string },
        });

        if (workStagesWithWorkType) {
            return res.status(400).json({
                error: 'Cannot delete work type that is used by work stages'
            });
        }

        await prisma.workType.delete({
            where: { id: id as string },
        });
        res.status(204).send();
    } catch (error) {
        console.error('Error deleting work type:', error);
        res.status(500).json({ error: 'Failed to delete work type' });
    }
});

export default router;