const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function restoreMissingData(backupPath) {
    try {
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
        console.log(`üìÅ –§–∞–π–ª: ${backupPath}`);

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
        const backupData = JSON.parse(fs.readFileSync(backupPath, 'utf8'));
        const data = backupData.data;

        console.log('üìä –î–∞–Ω–Ω—ã–µ –≤ –±—ç–∫–∞–ø–µ:');
        console.log(`   - –ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: ${data.projectProducts.length}`);
        console.log(`   - –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç: ${data.workStages.length}`);
        console.log(`   - –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–¥–µ–ª–∏–π: ${data.productSpecifications.length}`);
        console.log(`   - –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${data.specifications.length}`);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
        if (data.projectProducts.length > 0) {
            console.log('\nüèóÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
            let successCount = 0;
            for (const product of data.projectProducts) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç
                    const project = await prisma.project.findUnique({
                        where: { id: product.projectId }
                    });

                    if (project) {
                        await prisma.projectProduct.upsert({
                            where: { id: product.id },
                            update: product,
                            create: product
                        });
                        successCount++;
                        console.log(`   ‚úÖ –ü—Ä–æ–¥—É–∫—Ç: ${product.name || product.id}`);
                    } else {
                        console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ${product.id}: –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.id}: ${error.message}`);
                }
            }
            console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: ${successCount}/${data.projectProducts.length}`);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç
        if (data.workStages.length > 0) {
            console.log('\nüî® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç...');
            let successCount = 0;
            for (const stage of data.workStages) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç
                    const product = await prisma.projectProduct.findUnique({
                        where: { id: stage.productId }
                    });

                    if (product) {
                        await prisma.workStage.upsert({
                            where: { id: stage.id },
                            update: stage,
                            create: stage
                        });
                        successCount++;
                        console.log(`   ‚úÖ –≠—Ç–∞–ø: ${stage.name || stage.id}`);
                    } else {
                        console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —ç—Ç–∞–ø ${stage.id}: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ ${stage.id}: ${error.message}`);
                }
            }
            console.log(`‚úÖ –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç: ${successCount}/${data.workStages.length}`);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–¥–µ–ª–∏–π
        if (data.productSpecifications.length > 0) {
            console.log('\nüìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∏–∑–¥–µ–ª–∏–π...');
            let successCount = 0;
            for (const spec of data.productSpecifications) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç
                    const product = await prisma.projectProduct.findUnique({
                        where: { id: spec.productId }
                    });

                    if (product) {
                        await prisma.productSpecification.upsert({
                            where: { id: spec.id },
                            update: spec,
                            create: spec
                        });
                        successCount++;
                        console.log(`   ‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: ${spec.name || spec.id}`);
                    } else {
                        console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ${spec.id}: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ ${spec.id}: ${error.message}`);
                }
            }
            console.log(`‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–¥–µ–ª–∏–π: ${successCount}/${data.productSpecifications.length}`);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (data.specifications.length > 0) {
            console.log('\nüìù –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π...');
            let successCount = 0;
            for (const spec of data.specifications) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–¥–µ–ª–∏—è
                    const productSpec = await prisma.productSpecification.findUnique({
                        where: { id: spec.productSpecificationId }
                    });

                    if (productSpec) {
                        await prisma.specification.upsert({
                            where: { id: spec.id },
                            update: spec,
                            create: spec
                        });
                        successCount++;
                        console.log(`   ‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: ${spec.id}`);
                    } else {
                        console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ${spec.id}: —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–¥–µ–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                    }
                } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ ${spec.id}: ${error.message}`);
                }
            }
            console.log(`‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${successCount}/${data.specifications.length}`);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏ –∞—É–¥–∏—Ç–∞
        if (data.auditLogs.length > 0) {
            console.log('\nüìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞...');
            let successCount = 0;
            for (const log of data.auditLogs) {
                try {
                    await prisma.auditLog.upsert({
                        where: { id: log.id },
                        update: log,
                        create: log
                    });
                    successCount++;
                } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∞ ${log.id}: ${error.message}`);
                }
            }
            console.log(`‚úÖ –õ–æ–≥–∏ –∞—É–¥–∏—Ç–∞: ${successCount}/${data.auditLogs.length}`);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (data.refreshTokens.length > 0) {
            console.log('\nüîë –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
            let successCount = 0;
            for (const token of data.refreshTokens) {
                try {
                    await prisma.refreshToken.upsert({
                        where: { id: token.id },
                        update: token,
                        create: token
                    });
                    successCount++;
                } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ ${token.id}: ${error.message}`);
                }
            }
            console.log(`‚úÖ –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${successCount}/${data.refreshTokens.length}`);
        }

        console.log('\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const backupPath = process.argv[2];
if (!backupPath) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±—ç–∫–∞–ø–∞');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node restore-missing-data.js <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>');
    process.exit(1);
}

restoreMissingData(backupPath);
