/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Cursor
 */

const fs = require('fs');
const path = require('path');

console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Cursor...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –í—Å–µ —Ñ–∞–π–ª—ã MCP –Ω–∞ –º–µ—Å—Ç–µ
console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ MCP:');
const mcpFiles = [
    'mcp.json',
    'mcp-tools.json',
    'mcp-rules.md',
    'mcp-database-tools.js',
    'mcp-git-tools.js',
    'mcp-file-tools.js',
    'mcp-init.js',
    'install-mcp-servers.ps1',
    'check-mcp-fixed.ps1',
    'test-mcp.js',
    'demo-mcp-capabilities.js'
];

let existingFiles = 0;
mcpFiles.forEach(file => {
    if (fs.existsSync(file)) {
        console.log(`  ‚úÖ ${file}`);
        existingFiles++;
    } else {
        console.log(`  ‚ùå ${file}`);
    }
});

console.log(`\nüìä –§–∞–π–ª–æ–≤ MCP: ${existingFiles}/${mcpFiles.length}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã
console.log('\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:');
const requiredDirs = ['backups', 'logs', 'screenshots', 'memory', 'mcp-servers'];
let existingDirs = 0;

requiredDirs.forEach(dir => {
    if (fs.existsSync(dir)) {
        console.log(`  ‚úÖ ${dir}`);
        existingDirs++;
    } else {
        console.log(`  ‚ùå ${dir}`);
    }
});

console.log(`\nüìä –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${existingDirs}/${requiredDirs.length}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
console.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
try {
    const config = JSON.parse(fs.readFileSync('mcp.json', 'utf8'));
    const serverCount = Object.keys(config.mcpServers || {}).length;
    console.log(`  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞ (${serverCount} —Å–µ—Ä–≤–µ—Ä–æ–≤)`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä
    Object.keys(config.mcpServers || {}).forEach(serverName => {
        const server = config.mcpServers[serverName];
        console.log(`    - ${serverName}: ${server.command} ${server.args.join(' ')}`);
    });

} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
console.log('\nüõ†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:');
try {
    const MCPFileTools = require('./mcp-file-tools');
    console.log('  ‚úÖ –§–∞–π–ª–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    const MCPGitTools = require('./mcp-git-tools');
    console.log('  ‚úÖ Git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    const MCPDatabaseTools = require('./mcp-database-tools');
    console.log('  ‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
console.log('\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
try {
    const rules = fs.readFileSync('mcp-rules.md', 'utf8');
    const ruleLines = rules.split('\n').filter(line => line.trim());
    console.log(`  ‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${ruleLines.length} —Å—Ç—Ä–æ–∫)`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    const hasFileCheck = rules.includes('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫');
    const hasBackup = rules.includes('–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ');
    const hasSafety = rules.includes('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å');

    console.log(`    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫: ${hasFileCheck ? '‚úÖ' : '‚ùå'}`);
    console.log(`    - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: ${hasBackup ? '‚úÖ' : '‚ùå'}`);
    console.log(`    - –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${hasSafety ? '‚úÖ' : '‚ùå'}`);

} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
console.log('\nüß™ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:');
try {
    const MCPFileTools = require('./mcp-file-tools');
    const fileTools = new MCPFileTools();

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const testDir = path.join(__dirname, 'test-mcp-functionality');
    fileTools.ensureDirectory(testDir);
    console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const testFile = path.join(testDir, 'test.txt');
    fileTools.safeWriteFile(testFile, '–¢–µ—Å—Ç MCP —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', false);
    console.log('  ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const content = fileTools.safeReadFile(testFile);
    console.log('  ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // –û—á–∏—Å—Ç–∫–∞
    fs.rmSync(testDir, { recursive: true, force: true });
    console.log('  ‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');

} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
}

// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
console.log('\nüéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
console.log('==================');

const totalChecks = mcpFiles.length + requiredDirs.length + 4; // +4 –∑–∞ –∫–æ–Ω—Ñ–∏–≥, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –ø—Ä–∞–≤–∏–ª–∞, —Ç–µ—Å—Ç
const passedChecks = existingFiles + existingDirs + 4; // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç

console.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedChecks}/${totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);

if (passedChecks >= totalChecks * 0.9) {
    console.log('\nüéâ MCP –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!');
    console.log('‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
    console.log('‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã');
    console.log('‚úÖ Cursor —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');

    console.log('\nüöÄ AI –∞–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç:');
    console.log('  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤');
    console.log('  ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ Git');
    console.log('  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('  ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é');
    console.log('  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏');

} else if (passedChecks >= totalChecks * 0.7) {
    console.log('\n‚ö†Ô∏è MCP –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í');
    console.log('–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã');
    console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');

} else {
    console.log('\n‚ùå MCP –ù–ï –ì–û–¢–û–í');
    console.log('–ú–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä—ã');
}

console.log('\nüîß –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:');
console.log('  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\\install-mcp-servers.ps1');
console.log('  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ mcp.json');
console.log('  3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
console.log('  4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor –µ—â–µ —Ä–∞–∑');

console.log('\nüéØ MCP –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å AI –∞–≥–µ–Ω—Ç–æ–º!');
