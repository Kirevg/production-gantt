/**
 * MCP Initialization Script
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è AI –∞–≥–µ–Ω—Ç–∞
 */

const MCPDatabaseTools = require('./mcp-database-tools');
const MCPGitTools = require('./mcp-git-tools');
const MCPFileTools = require('./mcp-file-tools');
const fs = require('fs');
const path = require('path');

class MCPInitializer {
    constructor() {
        this.tools = {};
        this.config = this.loadConfig();
        this.setupDirectories();
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP
     */
    loadConfig() {
        try {
            const configPath = path.join(__dirname, 'mcp.json');
            if (fs.existsSync(configPath)) {
                const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                return config;
            } else {
                console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                return this.getDefaultConfig();
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
            return this.getDefaultConfig();
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultConfig() {
        return {
            mcpServers: {
                filesystem: {
                    command: "npx",
                    args: ["@modelcontextprotocol/server-filesystem", "C:\\Projects\\production-gantt"],
                    env: {
                        "ALLOWED_DIRECTORIES": "C:\\Projects\\production-gantt"
                    }
                },
                browser: {
                    command: "npx",
                    args: ["@modelcontextprotocol/server-browser"],
                    env: {
                        "HEADLESS": "false",
                        "BROWSER_TIMEOUT": "30000"
                    }
                }
            },
            safety: {
                allowed_directories: [
                    "C:\\Projects\\production-gantt",
                    "C:\\Projects\\production-gantt\\api",
                    "C:\\Projects\\production-gantt\\web",
                    "C:\\Projects\\production-gantt\\.cursor"
                ],
                max_file_size: "10MB",
                backup_before_changes: true
            }
        };
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    setupDirectories() {
        const directories = [
            path.join(__dirname, '..', 'backups'),
            path.join(__dirname, '..', 'logs'),
            path.join(__dirname, '..', 'screenshots'),
            path.join(__dirname, '..', 'memory'),
            path.join(__dirname, '..', 'temp')
        ];

        directories.forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
            }
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
     */
    async initializeTools() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            this.tools.files = new MCPFileTools();
            console.log('‚úÖ –§–∞–π–ª–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            this.tools.git = new MCPGitTools();
            console.log('‚úÖ Git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            this.tools.database = new MCPDatabaseTools();
            console.log('‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

            console.log('üéâ –í—Å–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
            return this.tools;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    async testTools() {
        try {
            console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...');

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            const testDir = path.join(__dirname, '..', 'temp', 'test');
            this.tools.files.ensureDirectory(testDir);
            console.log('‚úÖ –§–∞–π–ª–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç');

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º Git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            const gitStatus = this.tools.git.getStatus();
            console.log('‚úÖ Git –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç');

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const dbStats = await this.tools.database.getDatabaseStats();
            console.log('‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç');

            console.log('üéâ –í—Å–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${error.message}`);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    getToolsStatus() {
        const status = {
            files: {
                available: !!this.tools.files,
                description: '–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏'
            },
            git: {
                available: !!this.tools.git,
                description: '–†–∞–±–æ—Ç–∞ —Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º'
            },
            database: {
                available: !!this.tools.database,
                description: '–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö'
            }
        };

        console.log('üìä –°—Ç–∞—Ç—É—Å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:');
        Object.entries(status).forEach(([name, info]) => {
            const statusIcon = info.available ? '‚úÖ' : '‚ùå';
            console.log(`  ${statusIcon} ${name}: ${info.description}`);
        });

        return status;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async createFullBackup() {
        try {
            console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');

            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupDir = path.join(__dirname, '..', 'backups', `full-backup-${timestamp}`);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–∞
            this.tools.files.ensureDirectory(backupDir);

            // –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const dbBackup = await this.tools.database.createBackup();
            console.log(`‚úÖ –ë—ç–∫–∞–ø –ë–î: ${dbBackup}`);

            // –ë—ç–∫–∞–ø Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            const gitBackup = await this.tools.git.createBackup();
            console.log(`‚úÖ –ë—ç–∫–∞–ø Git: ${gitBackup}`);

            // –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            const importantFiles = [
                '.cursorrules',
                'package.json',
                'prisma/schema.prisma'
            ];

            importantFiles.forEach(file => {
                const sourcePath = path.join(process.cwd(), file);
                if (fs.existsSync(sourcePath)) {
                    const destPath = path.join(backupDir, file);
                    this.tools.files.safeCopyFile(sourcePath, destPath);
                }
            });

            console.log(`‚úÖ –ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupDir}`);
            return backupDir;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    async cleanup() {
        try {
            console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');

            if (this.tools.database) {
                await this.tools.database.disconnect();
            }

            console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∏ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = MCPInitializer;

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP
if (require.main === module) {
    const mcp = new MCPInitializer();

    mcp.initializeTools()
        .then(() => mcp.testTools())
        .then(() => mcp.getToolsStatus())
        .then(() => {
            console.log('üéâ MCP –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        })
        .catch(error => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP: ${error.message}`);
            process.exit(1);
        });
}

