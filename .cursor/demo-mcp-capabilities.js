/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n');

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
console.log('üìÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:');
try {
    const MCPFileTools = require('./mcp-file-tools');
    const fileTools = new MCPFileTools();

    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const demoDir = path.join(__dirname, 'demo-structure');
    const subDir = path.join(demoDir, 'subfolder');
    const filePath = path.join(subDir, 'demo-file.txt');

    console.log('  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π...');
    fileTools.ensureDirectory(demoDir);
    fileTools.ensureDirectory(subDir);

    console.log('  ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...');
    fileTools.safeWriteFile(filePath, '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç MCP', true);

    console.log('  ‚Ä¢ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...');
    const content = fileTools.safeReadFile(filePath);
    console.log(`    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${content}`);

    console.log('  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ...');
    const fileInfo = fileTools.getFileInfo(filePath);
    console.log(`    –†–∞–∑–º–µ—Ä: ${fileInfo.size} –±–∞–π—Ç`);

    // –û—á–∏—Å—Ç–∫–∞
    fs.rmSync(demoDir, { recursive: true, force: true });
    console.log('‚úÖ –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');

} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:', error.message);
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –†–∞–±–æ—Ç–∞ —Å Git
console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Git –æ–ø–µ—Ä–∞—Ü–∏–π:');
try {
    const MCPGitTools = require('./mcp-git-tools');
    const gitTools = new MCPGitTools();

    console.log('  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Git...');
    const status = gitTools.getStatus();
    console.log(`    –ò–∑–º–µ–Ω–µ–Ω–æ: ${status.modified.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`    –î–æ–±–∞–≤–ª–µ–Ω–æ: ${status.added.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`    –£–¥–∞–ª–µ–Ω–æ: ${status.deleted.length} —Ñ–∞–π–ª–æ–≤`);

    console.log('  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏...');
    const currentBranch = gitTools.getCurrentBranch();
    console.log(`    –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: ${currentBranch}`);

    console.log('  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤...');
    const history = gitTools.getCommitHistory(5);
    console.log(`    –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${history.length} –∫–æ–º–º–∏—Ç–æ–≤:`);
    history.forEach((commit, index) => {
        console.log(`      ${index + 1}. ${commit.hash} ${commit.message}`);
    });

    console.log('‚úÖ Git –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');

} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ Git –æ–ø–µ—Ä–∞—Ü–∏–π:', error.message);
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('‚öôÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP:');
try {
    const configPath = path.join(__dirname, 'mcp.json');
    if (fs.existsSync(configPath)) {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        console.log('  ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        console.log(`    –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${Object.keys(config.mcpServers || {}).length}`);

        Object.keys(config.mcpServers || {}).forEach(serverName => {
            console.log(`    - ${serverName}: ${config.mcpServers[serverName].command}`);
        });
    }

    const toolsPath = path.join(__dirname, 'mcp-tools.json');
    if (fs.existsSync(toolsPath)) {
        const tools = JSON.parse(fs.readFileSync(toolsPath, 'utf8'));
        console.log('  ‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã MCP –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        Object.keys(tools).forEach(category => {
            const toolCount = Object.keys(tools[category]).length;
            console.log(`    - ${category}: ${toolCount} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
        });
    }

    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');

} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
console.log('üìÇ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:');
const requiredDirs = ['backups', 'logs', 'screenshots', 'memory'];
let existingDirs = 0;

requiredDirs.forEach(dir => {
    const dirPath = path.join(__dirname, dir);
    if (fs.existsSync(dirPath)) {
        console.log(`  ‚úÖ ${dir} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        existingDirs++;
    } else {
        console.log(`  ‚ùå ${dir} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
});

console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${existingDirs}/${requiredDirs.length} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ`);

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
console.log('\nüõ°Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
try {
    const rulesPath = path.join(__dirname, 'mcp-rules.md');
    if (fs.existsSync(rulesPath)) {
        const rules = fs.readFileSync(rulesPath, 'utf8');
        const ruleCount = (rules.match(/‚úÖ/g) || []).length;
        const warningCount = (rules.match(/‚ö†Ô∏è/g) || []).length;
        const errorCount = (rules.match(/‚ùå/g) || []).length;

        console.log(`  ‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
        console.log(`    –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${ruleCount}`);
        console.log(`    –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warningCount}`);
        console.log(`    –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${errorCount}`);
    }

    console.log('‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã\n');

} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª:', error.message);
}

// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
console.log('üéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
console.log('==================');
console.log('‚úÖ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
console.log('‚úÖ –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úÖ Git –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
console.log('‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã');
console.log('‚úÖ Cursor –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

console.log('\nüöÄ AI –∞–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç:');
console.log('  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤');
console.log('  ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
console.log('  ‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º');
console.log('  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
console.log('  ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é');
console.log('  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');

console.log('\nüéØ MCP –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ!');
