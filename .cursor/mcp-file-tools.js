/**
 * MCP File Tools –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤
 */

const fs = require('fs');
const path = require('path');

class MCPFileTools {
    constructor(basePath = process.cwd()) {
        this.basePath = basePath;
        this.allowedDirectories = [
            path.join(basePath, 'api'),
            path.join(basePath, 'web'),
            path.join(basePath, '.cursor'),
            basePath
        ];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     * @param {string} dirPath - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     * @param {boolean} recursive - –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    ensureDirectory(dirPath, recursive = true) {
        try {
            const fullPath = path.resolve(dirPath);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
            if (!this.isPathAllowed(fullPath)) {
                throw new Error(`‚ùå –ü—É—Ç—å –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω: ${fullPath}`);
            }

            if (!fs.existsSync(fullPath)) {
                fs.mkdirSync(fullPath, { recursive: recursive });
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${fullPath}`);
                return true;
            } else {
                console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fullPath}`);
                return true;
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     * @param {string} dirPath - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    directoryExists(dirPath) {
        try {
            const fullPath = path.resolve(dirPath);
            return fs.existsSync(fullPath) && fs.statSync(fullPath).isDirectory();
        } catch (error) {
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
     */
    isPathAllowed(filePath) {
        const normalizedPath = path.resolve(filePath);
        return this.allowedDirectories.some(allowedDir =>
            normalizedPath.startsWith(path.resolve(allowedDir))
        );
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
     * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
     * @param {boolean} createBackup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
     */
    safeWriteFile(filePath, content, createBackup = true) {
        try {
            const fullPath = path.resolve(filePath);
            const dirPath = path.dirname(fullPath);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
            if (!this.isPathAllowed(fullPath)) {
                throw new Error(`‚ùå –ü—É—Ç—å –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω: ${fullPath}`);
            }

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            this.ensureDirectory(dirPath);

            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (createBackup && fs.existsSync(fullPath)) {
                this.createBackup(fullPath);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            fs.writeFileSync(fullPath, content, 'utf8');
            console.log(`‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fullPath}`);

            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
     * @param {string} backupSuffix - –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –±—ç–∫–∞–ø–∞
     */
    createBackup(filePath, backupSuffix = '.backup') {
        try {
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupPath = `${filePath}${backupSuffix}.${timestamp}`;

            fs.copyFileSync(filePath, backupPath);
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);

            return backupPath;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
     * @param {string} encoding - –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
     */
    safeReadFile(filePath, encoding = 'utf8') {
        try {
            const fullPath = path.resolve(filePath);

            if (!fs.existsSync(fullPath)) {
                throw new Error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
            }

            const content = fs.readFileSync(fullPath, encoding);
            console.log(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${fullPath}`);

            return content;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     * @param {string} dirPath - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     * @param {string} pattern - –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
     */
    getDirectoryContents(dirPath, pattern = null) {
        try {
            const fullPath = path.resolve(dirPath);

            if (!this.directoryExists(fullPath)) {
                throw new Error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${fullPath}`);
            }

            let files = fs.readdirSync(fullPath);

            if (pattern) {
                const regex = new RegExp(pattern);
                files = files.filter(file => regex.test(file));
            }

            console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ ${fullPath}: ${files.length}`);
            files.forEach(file => {
                console.log(`  - ${file}`);
            });

            return files;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
     * @param {string} sourcePath - –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å
     * @param {string} destPath - –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
     */
    safeCopyFile(sourcePath, destPath) {
        try {
            const fullSourcePath = path.resolve(sourcePath);
            const fullDestPath = path.resolve(destPath);
            const destDir = path.dirname(fullDestPath);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if (!fs.existsSync(fullSourcePath)) {
                throw new Error(`‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullSourcePath}`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π
            if (!this.isPathAllowed(fullDestPath)) {
                throw new Error(`‚ùå –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω: ${fullDestPath}`);
            }

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            this.ensureDirectory(destDir);

            // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            fs.copyFileSync(fullSourcePath, fullDestPath);
            console.log(`‚úÖ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${fullSourcePath} ‚Üí ${fullDestPath}`);

            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
     * @param {string} sourcePath - –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å
     * @param {string} destPath - –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
     */
    safeMoveFile(sourcePath, destPath) {
        try {
            const fullSourcePath = path.resolve(sourcePath);
            const fullDestPath = path.resolve(destPath);
            const destDir = path.dirname(fullDestPath);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if (!fs.existsSync(fullSourcePath)) {
                throw new Error(`‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullSourcePath}`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π
            if (!this.isPathAllowed(fullDestPath)) {
                throw new Error(`‚ùå –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω: ${fullDestPath}`);
            }

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            this.ensureDirectory(destDir);

            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            fs.renameSync(fullSourcePath, fullDestPath);
            console.log(`‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω: ${fullSourcePath} ‚Üí ${fullDestPath}`);

            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
     * @param {boolean} createBackup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
     */
    safeDeleteFile(filePath, createBackup = true) {
        try {
            const fullPath = path.resolve(filePath);

            if (!fs.existsSync(fullPath)) {
                console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
                return false;
            }

            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (createBackup) {
                this.createBackup(fullPath);
            }

            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            fs.unlinkSync(fullPath);
            console.log(`‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${fullPath}`);

            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
     */
    getFileInfo(filePath) {
        try {
            const fullPath = path.resolve(filePath);

            if (!fs.existsSync(fullPath)) {
                throw new Error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
            }

            const stats = fs.statSync(fullPath);
            const info = {
                path: fullPath,
                size: stats.size,
                created: stats.birthtime,
                modified: stats.mtime,
                isDirectory: stats.isDirectory(),
                isFile: stats.isFile()
            };

            console.log(`üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: ${fullPath}`);
            console.log(`  –†–∞–∑–º–µ—Ä: ${info.size} –±–∞–π—Ç`);
            console.log(`  –°–æ–∑–¥–∞–Ω: ${info.created}`);
            console.log(`  –ò–∑–º–µ–Ω–µ–Ω: ${info.modified}`);
            console.log(`  –¢–∏–ø: ${info.isDirectory ? '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è' : '–§–∞–π–ª'}`);

            return info;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
     * @param {string} mode - –†–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–∞ (r, w, x)
     */
    checkFilePermissions(filePath, mode = 'r') {
        try {
            const fullPath = path.resolve(filePath);

            if (!fs.existsSync(fullPath)) {
                throw new Error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
            }

            fs.accessSync(fullPath, fs.constants[mode.toUpperCase()]);
            console.log(`‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ ${mode} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: ${fullPath}`);

            return true;
        } catch (error) {
            console.error(`‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ${mode}: ${error.message}`);
            return false;
        }
    }
}

module.exports = MCPFileTools;

