/**
 * MCP Database Tools –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Production Gantt
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å PostgreSQL —á–µ—Ä–µ–∑ Prisma
 */

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

class MCPDatabaseTools {
    constructor() {
        this.prisma = new PrismaClient();
        this.backupDir = path.join(__dirname, '..', 'backups');
        this.ensureBackupDir();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     */
    ensureBackupDir() {
        if (!fs.existsSync(this.backupDir)) {
            fs.mkdirSync(this.backupDir, { recursive: true });
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±—ç–∫–∞–ø–æ–≤: ${this.backupDir}`);
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
     * @param {string} sql - SQL –∑–∞–ø—Ä–æ—Å
     * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
     */
    async executeQuery(sql, params = {}) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if (this.isUnsafeQuery(sql)) {
                throw new Error('‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ' + sql);
            }

            console.log(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º SQL: ${sql}`);
            const result = await this.prisma.$queryRawUnsafe(sql, ...Object.values(params));

            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ó–∞–ø–∏—Å–µ–π: ${result.length}`);
            return result;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å SQL –∑–∞–ø—Ä–æ—Å–∞
     * @param {string} sql - SQL –∑–∞–ø—Ä–æ—Å
     */
    isUnsafeQuery(sql) {
        const unsafeOperations = [
            'DROP', 'TRUNCATE', 'ALTER', 'DELETE FROM',
            'UPDATE SET', 'INSERT INTO'
        ];

        const upperSql = sql.toUpperCase();
        return unsafeOperations.some(op => upperSql.includes(op));
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @param {string} backupName - –ò–º—è –±—ç–∫–∞–ø–∞
     */
    async createBackup(backupName = null) {
        try {
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupFileName = backupName || `backup-${timestamp}.sql`;
            const backupPath = path.join(this.backupDir, backupFileName);

            console.log(`üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: ${backupPath}`);

            // –≠–∫—Å–ø–æ—Ä—Ç —Å—Ö–µ–º—ã –∏ –¥–∞–Ω–Ω—ã—Ö
            const schema = await this.exportSchema();
            const data = await this.exportData();

            const backupContent = `-- Backup created: ${new Date().toISOString()}
-- Database: Production Gantt

${schema}

${data}`;

            fs.writeFileSync(backupPath, backupContent, 'utf8');
            console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);

            return backupPath;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async exportSchema() {
        const tables = [
            'Counterparty', 'Person', 'NomenclatureItem', 'NomenclatureKind',
            'Product', 'ProductSpecification', 'Specification', 'Project',
            'WorkStage', 'Unit', 'User'
        ];

        let schema = '-- Database Schema\n';

        for (const table of tables) {
            try {
                const tableInfo = await this.prisma.$queryRaw`
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = ${table.toLowerCase()}
                    ORDER BY ordinal_position;
                `;

                schema += `\n-- Table: ${table}\n`;
                schema += `CREATE TABLE ${table} (\n`;

                tableInfo.forEach((col, index) => {
                    schema += `  ${col.column_name} ${col.data_type}`;
                    if (col.is_nullable === 'NO') schema += ' NOT NULL';
                    if (col.column_default) schema += ` DEFAULT ${col.column_default}`;
                    if (index < tableInfo.length - 1) schema += ',';
                    schema += '\n';
                });

                schema += ');\n';
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É ${table}: ${error.message}`);
            }
        }

        return schema;
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
     */
    async exportData() {
        let data = '\n-- Database Data\n';

        try {
            // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            const counterparties = await this.prisma.counterparty.findMany();
            data += this.formatDataForExport('Counterparty', counterparties);

            const persons = await this.prisma.person.findMany();
            data += this.formatDataForExport('Person', persons);

            const nomenclature = await this.prisma.nomenclatureItem.findMany();
            data += this.formatDataForExport('NomenclatureItem', nomenclature);

            const projects = await this.prisma.project.findMany();
            data += this.formatDataForExport('Project', projects);

        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
        }

        return data;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    formatDataForExport(tableName, data) {
        if (!data || data.length === 0) return '';

        let result = `\n-- Data for table ${tableName}\n`;

        data.forEach(record => {
            const columns = Object.keys(record);
            const values = Object.values(record).map(v =>
                v === null ? 'NULL' :
                    typeof v === 'string' ? `'${v.replace(/'/g, "''")}'` :
                        v
            );

            result += `INSERT INTO ${tableName} (${columns.join(', ')}) VALUES (${values.join(', ')});\n`;
        });

        return result;
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @param {string} migrationFile - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–∏–≥—Ä–∞—Ü–∏–∏
     */
    async runMigration(migrationFile) {
        try {
            console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${migrationFile}`);

            // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
            await this.createBackup(`pre-migration-${Date.now()}.sql`);

            // –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            const migrationSQL = fs.readFileSync(migrationFile, 'utf8');
            await this.prisma.$executeRawUnsafe(migrationSQL);

            console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async getDatabaseStats() {
        try {
            const stats = {
                counterparties: await this.prisma.counterparty.count(),
                persons: await this.prisma.person.count(),
                nomenclature: await this.prisma.nomenclatureItem.count(),
                projects: await this.prisma.project.count(),
                specifications: await this.prisma.specification.count(),
                users: await this.prisma.user.count()
            };

            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
            Object.entries(stats).forEach(([table, count]) => {
                console.log(`  ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`);
            });

            return stats;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
     */
    async disconnect() {
        await this.prisma.$disconnect();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

module.exports = MCPDatabaseTools;

