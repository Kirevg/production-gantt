/**
 * –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MCP
 */

const fs = require('fs');
const path = require('path');

console.log('üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: MCP –≤ –¥–µ–π—Å—Ç–≤–∏–∏\n');

// –ü—Ä–∏–º–µ—Ä 1: AI –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
console.log('üìÅ –ü—Ä–∏–º–µ—Ä 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞');
try {
    const MCPFileTools = require('./mcp-file-tools');
    const fileTools = new MCPFileTools();
    
    // AI –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const componentDir = path.join(__dirname, 'new-component');
    const files = [
        { path: 'index.ts', content: 'export { default } from "./Component";' },
        { path: 'Component.tsx', content: 'import React from "react";\n\nexport default function Component() {\n  return <div>New Component</div>;\n}' },
        { path: 'Component.test.tsx', content: 'import { render } from "@testing-library/react";\nimport Component from "./Component";\n\ntest("renders component", () => {\n  render(<Component />);\n});' },
        { path: 'Component.stories.tsx', content: 'import Component from "./Component";\n\nexport default {\n  title: "Components/Component",\n  component: Component,\n};\n\nexport const Default = {};' }
    ];
    
    console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...');
    
    files.forEach(file => {
        const filePath = path.join(componentDir, file.path);
        console.log(`    –°–æ–∑–¥–∞—é: ${file.path}`);
        fileTools.safeWriteFile(filePath, file.content, true);
    });
    
    console.log('  ‚úÖ AI –∞–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–ª –≤—Å–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã');
    console.log('  ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('\n  üìÇ –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
    const showStructure = (dir, prefix = '') => {
        const items = fs.readdirSync(dir);
        items.forEach((item, index) => {
            const itemPath = path.join(dir, item);
            const isLast = index === items.length - 1;
            const connector = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
            console.log(`  ${prefix}${connector}${item}`);
            
            if (fs.statSync(itemPath).isDirectory()) {
                showStructure(itemPath, prefix + (isLast ? '    ' : '‚îÇ   '));
            }
        });
    };
    
    showStructure(componentDir);
    
    // –û—á–∏—Å—Ç–∫–∞
    fs.rmSync(componentDir, { recursive: true, force: true });
    console.log('\n  ‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã\n');
    
} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
}

// –ü—Ä–∏–º–µ—Ä 2: AI –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Git
console.log('üîÑ –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º');
try {
    const MCPGitTools = require('./mcp-git-tools');
    const gitTools = new MCPGitTools();
    
    console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
    const status = gitTools.getStatus();
    
    if (status.modified.length > 0 || status.added.length > 0 || status.untracked.length > 0) {
        console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç –≤–∏–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:');
        console.log(`    - –ò–∑–º–µ–Ω–µ–Ω–æ: ${status.modified.length} —Ñ–∞–π–ª–æ–≤`);
        console.log(`    - –î–æ–±–∞–≤–ª–µ–Ω–æ: ${status.added.length} —Ñ–∞–π–ª–æ–≤`);
        console.log(`    - –ù–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö: ${status.untracked.length} —Ñ–∞–π–ª–æ–≤`);
        
        console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
        console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–ª–∏—Ç—å –≤–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
    } else {
        console.log('  ‚Ä¢ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∏—Å—Ç—ã–π, –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞');
    }
    
    console.log('  ‚úÖ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º\n');
    
} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ Git: ${error.message}\n`);
}

// –ü—Ä–∏–º–µ—Ä 3: AI –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
console.log('üóÑÔ∏è –ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
try {
    const MCPDatabaseTools = require('./mcp-database-tools');
    const dbTools = new MCPDatabaseTools();
    
    console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã');
    console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ë–î');
    console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏');
    console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î');
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞)
    try {
        const stats = await dbTools.getDatabaseStats();
        console.log('  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
        Object.entries(stats).forEach(([table, count]) => {
            console.log(`    - ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`);
        });
    } catch (dbError) {
        console.log('  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
    }
    
    console.log('  ‚úÖ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ë–î\n');
    
} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ë–î: ${error.message}\n`);
}

// –ü—Ä–∏–º–µ—Ä 4: AI –∞–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
console.log('üìö –ü—Ä–∏–º–µ—Ä 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
try {
    const MCPFileTools = require('./mcp-file-tools');
    const fileTools = new MCPFileTools();
    
    // AI –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è API
    const docsDir = path.join(__dirname, 'api-docs');
    const apiDocs = {
        'README.md': `# API Documentation

## Endpoints

### GET /api/projects
Returns list of all projects

### POST /api/projects
Creates a new project

### GET /api/projects/:id
Returns project by ID

## Authentication
All endpoints require Bearer token in Authorization header
`,
        'projects.md': `# Projects API

## Project Model
- id: string
- name: string
- description: string
- createdAt: Date
- updatedAt: Date
`,
        'auth.md': `# Authentication

## Login
POST /api/auth/login
Body: { email, password }

## Register
POST /api/auth/register
Body: { email, password, name }
`
    };
    
    console.log('  ‚Ä¢ AI –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API...');
    
    Object.entries(apiDocs).forEach(([filename, content]) => {
        const filePath = path.join(docsDir, filename);
        console.log(`    –°–æ–∑–¥–∞—é: ${filename}`);
        fileTools.safeWriteFile(filePath, content, true);
    });
    
    console.log('  ‚úÖ AI –∞–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é');
    console.log('  ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏');
    
    // –û—á–∏—Å—Ç–∫–∞
    fs.rmSync(docsDir, { recursive: true, force: true });
    console.log('  ‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã\n');
    
} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
}

// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
console.log('üéâ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´ –ó–ê–í–ï–†–®–ï–ù–´');
console.log('==================================');
console.log('‚úÖ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤');
console.log('‚úÖ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º');
console.log('‚úÖ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
console.log('‚úÖ AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é');
console.log('‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');

console.log('\nüöÄ MCP —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI –∞–≥–µ–Ω—Ç–∞:');
console.log('  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤');
console.log('  ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Git –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
console.log('  ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º');
console.log('  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
console.log('  ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏');

console.log('\nüéØ –¢–µ–ø–µ—Ä—å AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ!');
console.log('MCP –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ–µ–∫—Ç–æ–º Production Gantt!');
