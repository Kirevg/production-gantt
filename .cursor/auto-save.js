/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–∞—Ç–∞
 */

const AutoBackupSystem = require('./auto-backup-system');
const fs = require('fs');
const path = require('path');

class AutoSaveSystem {
    constructor(intervalMinutes = 5) {
        this.backupSystem = new AutoBackupSystem();
        this.saveInterval = intervalMinutes * 60 * 1000; // –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        this.isRunning = false;
        this.intervalId = null;
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    startAutoSave() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
            return;
        }

        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
        this.isRunning = true;

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –±—ç–∫–∞–ø
        this.createAutoBackup('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        this.intervalId = setInterval(() => {
            this.createAutoBackup('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');
        }, this.saveInterval);

        console.log(`‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.saveInterval / 1000} —Å–µ–∫)`);
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    stopAutoSave() {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ');
            return;
        }

        console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
        this.isRunning = false;

        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }

        console.log('‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    createAutoBackup(description = '') {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
            if (!this.hasChanges()) {
                console.log('üì≠ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞');
                return null;
            }

            const timestamp = new Date().toISOString();
            const backupName = `auto-backup-${timestamp.replace(/[:.]/g, '-')}`;
            const backupPath = this.backupSystem.createFullBackup(description);

            console.log(`üíæ –ê–≤—Ç–æ–±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupName}`);

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
            this.backupSystem.cleanupOldBackups(20);

            return backupPath;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞: ${error.message}`);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
     */
    createPreChangeBackup(changeDescription = '') {
        try {
            const description = `–ü–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º: ${changeDescription}`;
            const backupPath = this.backupSystem.createFullBackup(description);
            console.log(`üõ°Ô∏è –ó–∞—â–∏—Ç–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${changeDescription}`);
            return backupPath;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—â–∏—Ç–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: ${error.message}`);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
     */
    showBackupList() {
        try {
            const backups = this.backupSystem.getBackupList();

            if (backups.length === 0) {
                console.log('üì≠ –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:');
            console.log('==================');

            backups.forEach((backup, index) => {
                const date = new Date(backup.timestamp).toLocaleString('ru-RU');
                const size = (backup.size / 1024 / 1024).toFixed(2);
                console.log(`${index + 1}. ${backup.name}`);
                console.log(`   üìÖ –î–∞—Ç–∞: ${date}`);
                console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${backup.description}`);
                console.log(`   üìä –§–∞–π–ª–æ–≤: ${backup.filesCount}, –†–∞–∑–º–µ—Ä: ${size} MB`);
                console.log(`   üåø –í–µ—Ç–∫–∞: ${backup.gitBranch}, –ö–æ–º–º–∏—Ç: ${backup.gitCommit.substring(0, 8)}`);
                console.log('');
            });
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: ${error.message}`);
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏–∑ –±—ç–∫–∞–ø–∞
     */
    restoreFromBackup(backupName) {
        try {
            console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞: ${backupName}`);
            this.backupSystem.restoreFromBackup(backupName);
            console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–∞
     */
    backupBeforeFileChange(filePath, description = '') {
        try {
            const changeDesc = description || `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filePath}`;
            return this.createPreChangeBackup(changeDesc);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞: ${error.message}`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
     */
    hasChanges() {
        try {
            const { execSync } = require('child_process');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Git —Å—Ç–∞—Ç—É—Å
            const gitStatus = execSync('git status --porcelain', {
                cwd: this.backupSystem.projectPath,
                encoding: 'utf8'
            }).trim();

            if (gitStatus) {
                console.log(`üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git: ${gitStatus.split('\n').length} —Ñ–∞–π–ª–æ–≤`);
                return true;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            const importantFiles = [
                'api/src',
                'web/src',
                'api/package.json',
                'web/package.json',
                'api/prisma/schema.prisma'
            ];

            const lastBackup = this.getLastBackupTime();
            if (!lastBackup) {
                console.log('üì≠ –ü–µ—Ä–≤—ã–π –±—ç–∫–∞–ø - —Å–æ–∑–¥–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
                return true;
            }

            for (const file of importantFiles) {
                const filePath = require('path').join(this.backupSystem.projectPath, file);
                if (require('fs').existsSync(filePath)) {
                    const stats = require('fs').statSync(filePath);
                    if (stats.mtime > lastBackup) {
                        console.log(`üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ: ${file}`);
                        return true;
                    }
                }
            }

            return false;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${error.message}`);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return true;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
     */
    getLastBackupTime() {
        try {
            const backups = this.backupSystem.getBackupList();
            if (backups.length === 0) {
                return null;
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
            const lastBackup = backups.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))[0];
            return new Date(lastBackup.timestamp);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞: ${error.message}`);
            return null;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∏ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const autoSave = new AutoSaveSystem();

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
if (require.main === module) {
    const args = process.argv.slice(2);
    const command = args[0];

    switch (command) {
        case 'start':
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            const intervalMinutes = parseInt(args[1]) || 5;
            if (intervalMinutes !== 5) {
                console.log(`‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalMinutes} –º–∏–Ω—É—Ç`);
                autoSave.saveInterval = intervalMinutes * 60 * 1000;
            }
            autoSave.startAutoSave();
            break;
        case 'stop':
            autoSave.stopAutoSave();
            break;
        case 'backup':
            autoSave.createAutoBackup(args[1] || '–†—É—á–Ω–æ–π –±—ç–∫–∞–ø');
            break;
        case 'list':
            autoSave.showBackupList();
            break;
        case 'restore':
            if (args[1]) {
                autoSave.restoreFromBackup(args[1]);
            } else {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
            }
            break;
        default:
            console.log('üîß –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            console.log('=====================================');
            console.log('–ö–æ–º–∞–Ω–¥—ã:');
            console.log('  start [–º–∏–Ω—É—Ç—ã] - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω)');
            console.log('  stop            - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
            console.log('  backup          - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –≤—Ä—É—á–Ω—É—é');
            console.log('  list            - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤');
            console.log('  restore         - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞');
            console.log('');
            console.log('–ü—Ä–∏–º–µ—Ä—ã:');
            console.log('  node auto-save.js start           # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
            console.log('  node auto-save.js start 10        # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç');
            console.log('  node auto-save.js start 1         # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É');
            console.log('  node auto-save.js backup "–û–ø–∏—Å–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"');
            console.log('  node auto-save.js restore backup-2025-10-19T18-30-00-000Z');
    }
}

module.exports = AutoSaveSystem;
