/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MCP –≤ –¥–µ–π—Å—Ç–≤–∏–∏
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ MCP –≤ –¥–µ–π—Å—Ç–≤–∏–∏ - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n');

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
console.log('üìÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫');
try {
    const MCPFileTools = require('./mcp-file-tools');
    const fileTools = new MCPFileTools();
    
    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    const complexPath = path.join(__dirname, 'demo', 'nested', 'structure', 'deep');
    const filePath = path.join(complexPath, 'test-file.txt');
    
    console.log('  ‚Ä¢ –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–∞–ø–æ–∫...');
    fileTools.safeWriteFile(filePath, 'MCP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–ª –≤—Å–µ –ø–∞–ø–∫–∏!', true);
    console.log('  ‚úÖ MCP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–ª –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω—ã
    const dirExists = fileTools.directoryExists(path.dirname(filePath));
    console.log(`  ‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${dirExists}`);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const content = fileTools.safeReadFile(filePath);
    console.log(`  ‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: "${content}"`);
    
    // –û—á–∏—Å—Ç–∫–∞
    fs.rmSync(path.join(__dirname, 'demo'), { recursive: true, force: true });
    console.log('  ‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã\n');
    
} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: Git –æ–ø–µ—Ä–∞—Ü–∏–∏
console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: Git –æ–ø–µ—Ä–∞—Ü–∏–∏');
try {
    const MCPGitTools = require('./mcp-git-tools');
    const gitTools = new MCPGitTools();
    
    console.log('  ‚Ä¢ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
    const status = gitTools.getStatus();
    console.log(`    –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${status.modified.length}`);
    console.log(`    –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${status.added.length}`);
    console.log(`    –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${status.deleted.length}`);
    console.log(`    –ù–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: ${status.untracked.length}`);
    
    console.log('  ‚Ä¢ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É...');
    const currentBranch = gitTools.getCurrentBranch();
    console.log(`    –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: ${currentBranch}`);
    
    console.log('  ‚Ä¢ –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤...');
    const history = gitTools.getCommitHistory(3);
    console.log(`    –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${history.length} –∫–æ–º–º–∏—Ç–æ–≤:`);
    history.forEach((commit, index) => {
        console.log(`      ${index + 1}. ${commit.hash.substring(0, 8)} - ${commit.message}`);
    });
    
    console.log('  ‚úÖ Git –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    
} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ Git: ${error.message}\n`);
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('‚öôÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP');
try {
    const configPath = path.join(__dirname, 'mcp.json');
    if (fs.existsSync(configPath)) {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        console.log('  ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        console.log(`    –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${Object.keys(config.mcpServers || {}).length}`);
        
        console.log('  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã:');
        Object.keys(config.mcpServers || {}).forEach(serverName => {
            const server = config.mcpServers[serverName];
            console.log(`    - ${serverName}: ${server.command} ${server.args.join(' ')}`);
        });
        
        console.log('  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –∞–∫—Ç–∏–≤–Ω–∞\n');
    } else {
        console.log('  ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n');
    }
} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}\n`);
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
console.log('üõ°Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
try {
    const rulesPath = path.join(__dirname, 'mcp-rules.md');
    if (fs.existsSync(rulesPath)) {
        const rules = fs.readFileSync(rulesPath, 'utf8');
        console.log('  ‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
        const safeRules = (rules.match(/‚úÖ/g) || []).length;
        const warnings = (rules.match(/‚ö†Ô∏è/g) || []).length;
        const forbidden = (rules.match(/‚ùå/g) || []).length;
        
        console.log(`    –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${safeRules}`);
        console.log(`    –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings}`);
        console.log(`    –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${forbidden}`);
        
        console.log('  ‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã\n');
    } else {
        console.log('  ‚ùå –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n');
    }
} catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–≤–∏–ª: ${error.message}\n`);
}

// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
console.log('üéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
console.log('==================');
console.log('‚úÖ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã');
console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
console.log('‚úÖ Git –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
console.log('‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã');

console.log('\nüöÄ AI –∞–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç:');
console.log('  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤');
console.log('  ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º');
console.log('  ‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –±—ç–∫–∞–ø–∞–º–∏');
console.log('  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
console.log('  ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é');
console.log('  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏');

console.log('\nüéØ MCP –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ!');
console.log('–¢–µ–ø–µ—Ä—å AI –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ –ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞!');
