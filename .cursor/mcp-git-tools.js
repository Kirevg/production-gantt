/**
 * MCP Git Tools –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class MCPGitTools {
    constructor(repoPath = process.cwd()) {
        this.repoPath = repoPath;
        this.ensureGitRepo();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
     */
    ensureGitRepo() {
        try {
            execSync('git status', { cwd: this.repoPath, stdio: 'pipe' });
            console.log(`‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω: ${this.repoPath}`);
        } catch (error) {
            throw new Error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º: ${this.repoPath}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
     */
    getStatus() {
        try {
            const status = execSync('git status --porcelain', {
                cwd: this.repoPath,
                encoding: 'utf8'
            });

            const lines = status.trim().split('\n').filter(line => line);

            const changes = {
                modified: [],
                added: [],
                deleted: [],
                untracked: []
            };

            lines.forEach(line => {
                const status = line.substring(0, 2);
                const file = line.substring(3);

                if (status.includes('M')) changes.modified.push(file);
                if (status.includes('A')) changes.added.push(file);
                if (status.includes('D')) changes.deleted.push(file);
                if (status.includes('?')) changes.untracked.push(file);
            });

            console.log('üìä –°—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:');
            console.log(`  –ò–∑–º–µ–Ω–µ–Ω–æ: ${changes.modified.length} —Ñ–∞–π–ª–æ–≤`);
            console.log(`  –î–æ–±–∞–≤–ª–µ–Ω–æ: ${changes.added.length} —Ñ–∞–π–ª–æ–≤`);
            console.log(`  –£–¥–∞–ª–µ–Ω–æ: ${changes.deleted.length} —Ñ–∞–π–ª–æ–≤`);
            console.log(`  –ù–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö: ${changes.untracked.length} —Ñ–∞–π–ª–æ–≤`);

            return changes;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Git: ${error.message}`);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
     * @param {Array} files - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @param {boolean} push - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
     */
    async commitChanges(message, files = null, push = false) {
        try {
            console.log(`üíæ –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç: ${message}`);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å
            if (files && files.length > 0) {
                files.forEach(file => {
                    execSync(`git add "${file}"`, { cwd: this.repoPath });
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å: ${file}`);
                });
            } else {
                execSync('git add .', { cwd: this.repoPath });
                console.log('‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å');
            }

            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            execSync(`git commit -m "${message}"`, { cwd: this.repoPath });
            console.log(`‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: ${message}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (push) {
                await this.pushChanges();
            }

            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
     */
    async pushChanges(branch = null) {
        try {
            const currentBranch = branch || this.getCurrentBranch();
            console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–µ—Ç–∫—É: ${currentBranch}`);

            execSync(`git push origin ${currentBranch}`, { cwd: this.repoPath });
            console.log(`‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ ${currentBranch}`);

            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${error.message}`);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
     * @param {string} branchName - –ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏
     * @param {string} fromBranch - –ë–∞–∑–æ–≤–∞—è –≤–µ—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    createBranch(branchName, fromBranch = null) {
        try {
            console.log(`üåø –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É: ${branchName}`);

            if (fromBranch) {
                execSync(`git checkout -b ${branchName} ${fromBranch}`, { cwd: this.repoPath });
            } else {
                execSync(`git checkout -b ${branchName}`, { cwd: this.repoPath });
            }

            console.log(`‚úÖ –í–µ—Ç–∫–∞ ${branchName} —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –≤–µ—Ç–∫—É
     * @param {string} branchName - –ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏
     */
    checkoutBranch(branchName) {
        try {
            console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–µ—Ç–∫—É: ${branchName}`);

            execSync(`git checkout ${branchName}`, { cwd: this.repoPath });
            console.log(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –Ω–∞ –≤–µ—Ç–∫—É: ${branchName}`);

            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Ç–∫–∏: ${error.message}`);
            throw error;
        }
    }

    /**
     * –°–ª–∏–≤–∞–µ—Ç –≤–µ—Ç–∫–∏
     * @param {string} sourceBranch - –ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ç–∫–∞
     * @param {string} targetBranch - –¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞
     */
    async mergeBranch(sourceBranch, targetBranch) {
        try {
            console.log(`üîÄ –°–ª–∏–≤–∞–µ–º –≤–µ—Ç–∫—É ${sourceBranch} –≤ ${targetBranch}`);

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ü–µ–ª–µ–≤—É—é –≤–µ—Ç–∫—É
            this.checkoutBranch(targetBranch);

            // –°–ª–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            execSync(`git merge ${sourceBranch}`, { cwd: this.repoPath });
            console.log(`‚úÖ –í–µ—Ç–∫–∞ ${sourceBranch} —Å–ª–∏—Ç–∞ –≤ ${targetBranch}`);

            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–ª–∏—è–Ω–∏—è –≤–µ—Ç–æ–∫: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
     */
    getCurrentBranch() {
        try {
            const branch = execSync('git branch --show-current', {
                cwd: this.repoPath,
                encoding: 'utf8'
            }).trim();

            console.log(`üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: ${branch}`);
            return branch;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫
     */
    getBranches() {
        try {
            const branches = execSync('git branch -a', {
                cwd: this.repoPath,
                encoding: 'utf8'
            });

            const branchList = branches
                .split('\n')
                .map(line => line.trim())
                .filter(line => line && !line.includes('HEAD'))
                .map(line => line.replace(/^\*?\s*/, ''));

            console.log(`üåø –ù–∞–π–¥–µ–Ω–æ –≤–µ—Ç–æ–∫: ${branchList.length}`);
            branchList.forEach(branch => {
                console.log(`  - ${branch}`);
            });

            return branchList;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–µ—Ç–æ–∫: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤
     * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
     */
    getCommitHistory(limit = 10) {
        try {
            const history = execSync(`git log --oneline -${limit}`, {
                cwd: this.repoPath,
                encoding: 'utf8'
            });

            const commits = history
                .split('\n')
                .filter(line => line.trim())
                .map(line => {
                    const [hash, ...message] = line.split(' ');
                    return {
                        hash: hash,
                        message: message.join(' ')
                    };
                });

            console.log(`üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${limit}):`);
            commits.forEach(commit => {
                console.log(`  ${commit.hash} ${commit.message}`);
            });

            return commits;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ–≥
     * @param {string} tagName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–≥–∞
     */
    createTag(tagName, message = '') {
        try {
            console.log(`üè∑Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–µ–≥: ${tagName}`);

            if (message) {
                execSync(`git tag -a ${tagName} -m "${message}"`, { cwd: this.repoPath });
            } else {
                execSync(`git tag ${tagName}`, { cwd: this.repoPath });
            }

            console.log(`‚úÖ –¢–µ–≥ ${tagName} —Å–æ–∑–¥–∞–Ω`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
     * @param {string} commitHash - –•–µ—à –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞
     */
    revertToCommit(commitHash) {
        try {
            console.log(`‚è™ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ –∫–æ–º–º–∏—Ç—É: ${commitHash}`);

            // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const backupBranch = `backup-${Date.now()}`;
            this.createBranch(backupBranch);

            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–º–º–∏—Ç—É
            execSync(`git reset --hard ${commitHash}`, { cwd: this.repoPath });
            console.log(`‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∫ –∫–æ–º–º–∏—Ç—É: ${commitHash}`);
            console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–µ—Ç–∫–µ: ${backupBranch}`);

            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
     * @param {string} operation - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    isSafeOperation(operation) {
        const unsafeOperations = [
            'force-push', 'delete-branch', 'reset-hard',
            'clean-all', 'remove-remote'
        ];

        return !unsafeOperations.includes(operation);
    }
}

module.exports = MCPGitTools;

