/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–∞—Ç–∞
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class AutoBackupSystem {
    constructor(projectPath = process.cwd()) {
        this.projectPath = projectPath;
        this.backupDir = path.join(projectPath, '.cursor', 'backups');
        this.ensureBackupDir();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
     */
    ensureBackupDir() {
        if (!fs.existsSync(this.backupDir)) {
            fs.mkdirSync(this.backupDir, { recursive: true });
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±—ç–∫–∞–ø–æ–≤: ${this.backupDir}`);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ø—Ä–æ–µ–∫—Ç–∞
     */
    createFullBackup(description = '') {
        try {
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupName = `backup-${timestamp}`;
            const backupPath = path.join(this.backupDir, backupName);
            
            console.log(`üíæ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø: ${backupName}`);
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–∞
            fs.mkdirSync(backupPath, { recursive: true });
            
            // –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            const importantFiles = [
                'api/src',
                'web/src',
                'api/package.json',
                'web/package.json',
                'api/prisma/schema.prisma',
                '.cursorrules',
                'README.md'
            ];
            
            importantFiles.forEach(file => {
                const sourcePath = path.join(this.projectPath, file);
                const destPath = path.join(backupPath, file);
                
                if (fs.existsSync(sourcePath)) {
                    const destDir = path.dirname(destPath);
                    if (!fs.existsSync(destDir)) {
                        fs.mkdirSync(destDir, { recursive: true });
                    }
                    
                    if (fs.statSync(sourcePath).isDirectory()) {
                        this.copyDirectory(sourcePath, destPath);
                    } else {
                        fs.copyFileSync(sourcePath, destPath);
                    }
                    console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${file}`);
                }
            });
            
            // –°–æ–∑–¥–∞–µ–º Git —Å–Ω–∞–ø—à–æ—Ç
            const gitSnapshot = this.createGitSnapshot();
            fs.writeFileSync(path.join(backupPath, 'git-snapshot.json'), JSON.stringify(gitSnapshot, null, 2));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—ç–∫–∞–ø–∞
            const backupInfo = {
                timestamp: new Date().toISOString(),
                description: description,
                gitCommit: gitSnapshot.currentCommit,
                gitBranch: gitSnapshot.currentBranch,
                filesCount: this.countFiles(backupPath),
                size: this.getDirectorySize(backupPath)
            };
            
            fs.writeFileSync(path.join(backupPath, 'backup-info.json'), JSON.stringify(backupInfo, null, 2));
            
            console.log(`‚úÖ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupPath}`);
            console.log(`üìä –§–∞–π–ª–æ–≤: ${backupInfo.filesCount}, –†–∞–∑–º–µ—Ä: ${backupInfo.size} –±–∞–π—Ç`);
            
            return backupPath;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: ${error.message}`);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç Git —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    createGitSnapshot() {
        try {
            const currentCommit = execSync('git rev-parse HEAD', { cwd: this.projectPath, encoding: 'utf8' }).trim();
            const currentBranch = execSync('git branch --show-current', { cwd: this.projectPath, encoding: 'utf8' }).trim();
            const status = execSync('git status --porcelain', { cwd: this.projectPath, encoding: 'utf8' });
            
            return {
                currentCommit,
                currentBranch,
                status: status.split('\n').filter(line => line.trim()),
                timestamp: new Date().toISOString()
            };
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Git —Å–Ω–∞–ø—à–æ—Ç–∞: ${error.message}`);
            return {
                currentCommit: 'unknown',
                currentBranch: 'unknown',
                status: [],
                timestamp: new Date().toISOString()
            };
        }
    }

    /**
     * –ö–æ–ø–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
     */
    copyDirectory(source, destination) {
        if (!fs.existsSync(destination)) {
            fs.mkdirSync(destination, { recursive: true });
        }
        
        const items = fs.readdirSync(source);
        items.forEach(item => {
            const sourcePath = path.join(source, item);
            const destPath = path.join(destination, item);
            
            if (fs.statSync(sourcePath).isDirectory()) {
                this.copyDirectory(sourcePath, destPath);
            } else {
                fs.copyFileSync(sourcePath, destPath);
            }
        });
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    countFiles(dir) {
        let count = 0;
        const items = fs.readdirSync(dir);
        
        items.forEach(item => {
            const itemPath = path.join(dir, item);
            if (fs.statSync(itemPath).isDirectory()) {
                count += this.countFiles(itemPath);
            } else {
                count++;
            }
        });
        
        return count;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –±–∞–π—Ç–∞—Ö
     */
    getDirectorySize(dir) {
        let size = 0;
        const items = fs.readdirSync(dir);
        
        items.forEach(item => {
            const itemPath = path.join(dir, item);
            if (fs.statSync(itemPath).isDirectory()) {
                size += this.getDirectorySize(itemPath);
            } else {
                size += fs.statSync(itemPath).size;
            }
        });
        
        return size;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤
     */
    getBackupList() {
        try {
            const backups = [];
            const items = fs.readdirSync(this.backupDir);
            
            items.forEach(item => {
                const backupPath = path.join(this.backupDir, item);
                if (fs.statSync(backupPath).isDirectory()) {
                    const infoPath = path.join(backupPath, 'backup-info.json');
                    if (fs.existsSync(infoPath)) {
                        const info = JSON.parse(fs.readFileSync(infoPath, 'utf8'));
                        backups.push({
                            name: item,
                            path: backupPath,
                            ...info
                        });
                    }
                }
            });
            
            return backups.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: ${error.message}`);
            return [];
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏–∑ –±—ç–∫–∞–ø–∞
     */
    restoreFromBackup(backupName) {
        try {
            const backupPath = path.join(this.backupDir, backupName);
            if (!fs.existsSync(backupPath)) {
                throw new Error(`–ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: ${backupName}`);
            }
            
            console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞: ${backupName}`);
            
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const currentBackup = this.createFullBackup('–ü–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–∑ –±—ç–∫–∞–ø–∞');
            console.log(`üíæ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${currentBackup}`);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
            const items = fs.readdirSync(backupPath);
            items.forEach(item => {
                if (item !== 'backup-info.json' && item !== 'git-snapshot.json') {
                    const sourcePath = path.join(backupPath, item);
                    const destPath = path.join(this.projectPath, item);
                    
                    if (fs.existsSync(destPath)) {
                        fs.rmSync(destPath, { recursive: true, force: true });
                    }
                    
                    if (fs.statSync(sourcePath).isDirectory()) {
                        this.copyDirectory(sourcePath, destPath);
                    } else {
                        fs.copyFileSync(sourcePath, destPath);
                    }
                    
                    console.log(`  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${item}`);
                }
            });
            
            console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –±—ç–∫–∞–ø–∞: ${backupName}`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N)
     */
    cleanupOldBackups(keepCount = 10) {
        try {
            const backups = this.getBackupList();
            if (backups.length <= keepCount) {
                console.log(`üìä –ë—ç–∫–∞–ø–æ–≤: ${backups.length}, –ª–∏–º–∏—Ç: ${keepCount}. –û—á–∏—Å—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞.`);
                return;
            }
            
            const toDelete = backups.slice(keepCount);
            console.log(`üßπ –£–¥–∞–ª—è–µ–º ${toDelete.length} —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...`);
            
            toDelete.forEach(backup => {
                fs.rmSync(backup.path, { recursive: true, force: true });
                console.log(`  üóëÔ∏è –£–¥–∞–ª–µ–Ω: ${backup.name}`);
            });
            
            console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –±—ç–∫–∞–ø–æ–≤: ${keepCount}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
        }
    }
}

module.exports = AutoBackupSystem;
